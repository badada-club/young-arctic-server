interface IEvent {
    id: ID!
    name: String!
    date: Date!
    description: String
    location: String
    cost: String
}

type Event implements IEvent {
    id: ID!
    name: String!
    date: Date!
    description: String
    location: String
    cost: String
}

type VkEvent implements IEvent {
    id: ID!
    name: String!
    date: Date!
    description: String
    location: String
    cost: String

    creatorVkId: String!
    groupVkId: String!
}

input VkEventInput {
    name: String!
    date: Date!
    description: String
    location: String
    cost: String

    creatorVkId: String!
    groupVkId: String!
}

type Query {
    getVkEvents: [VkEvent]!
}
type Mutation {
    createVkEvent(input: VkEventInput): VkEvent
}